# -*- coding: utf-8 -*-
"""worksheet3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZInXaCi2UANmj8-UA3mVMwsvBhdFLAc9
"""

#3.1
#1
import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/AI/WORKSHOP2/Titanic-Dataset.csv")
print(df.head())

#ques1
#problem1
fare = df[['Fare']]
print(fare.head())

class_age = df[['Pclass', 'Age']]
print(class_age.head())

#question3
survived_gender = df[['Survived', 'Sex']]
print(survived_gender.head())

#problem2
#question1
fare_gt_100 = df[df['Fare'] > 100]
print(fare_gt_100)

first_class = df[df['Pclass'] == 1]
print(first_class.head())

first_class = df[df['Pclass'] == 1]
print(first_class.head())

female_under_18 = df[(df['Age'] < 18) & (df['Sex'] == 'female')]
print(female_under_18)

#subsetting rows by categorical variables
#question1
embarked_c_or_s = df[df['Embarked'].isin(['C', 'S'])]
print(embarked_c_or_s)

# Filter for passengers in class 1 or class 2
first_second_class = df[df['Pclass'].isin([1, 2])]
print(first_second_class)

# Filter for passengers in class 1 or class 2
first_second_class = df[df['Pclass'].isin([1, 2])]
print(first_second_class)

# Fill missing values in Age column with the median (explicit assignment to avoid warning)
df['Age'] = df['Age'].fillna(df['Age'].median())

# Create fare_per_year column (no changes needed here)
df['fare_per_year'] = df['Fare'] / df['Age']

# Subset for fare_per_year > 5
high_fare_age = df[df['fare_per_year'] > 5]
print(high_fare_age)

# Sort by fare_per_year descending
high_fare_age_srt = high_fare_age.sort_values(by='fare_per_year', ascending=False)
print(high_fare_age_srt)

# Select Name and fare_per_year columns
result = high_fare_age_srt[['Name', 'fare_per_year']]
print(result)

# Create fare_per_class column
df['fare_per_class'] = df['Fare'] / df['Pclass']

# Filter for adult males
adult_males = df[(df['Sex'] == 'male') & (df['Age'] >= 18)]
print(adult_males)

# Sort by fare_per_class descending
adult_males_srt = adult_males.sort_values(by='fare_per_class', ascending=False)
print(adult_males_srt)

# Select relevant columns
result = adult_males_srt[['Name', 'Age', 'fare_per_class']]
print(result)

# Total fare paid by all passengers
total_fare = df['Fare'].sum()
print(total_fare)

# Total fare by class
fare_first_class = df[df['Pclass'] == 1]['Fare'].sum()
fare_second_class = df[df['Pclass'] == 2]['Fare'].sum()
fare_third_class = df[df['Pclass'] == 3]['Fare'].sum()

print(fare_first_class, fare_second_class, fare_third_class)

# Create a list of fare totals by class
class_fare_totals = [fare_first_class, fare_second_class, fare_third_class]
print(class_fare_totals)

# Proportions of fare revenue by class
class_fare_proportion = [fare / total_fare for fare in class_fare_totals]
print(class_fare_proportion)

# Categorize passengers by age
df['age_group'] = pd.cut(df['Age'], bins=[0, 18, 64, float('inf')], labels=['child', 'adult', 'senior'])

# Total number of passengers
total_passengers = len(df)
# Count passengers in each age group
age_group_counts = df['age_group'].value_counts()
print(age_group_counts)

# Proportions of passengers in each age group
age_group_proportion = age_group_counts / total_passengers * 100
print(age_group_proportion)